[
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi.params",
        "description": "fastapi.params",
        "isExtraImport": true,
        "detail": "fastapi.params",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = 'postgresql://postgres:Ali_wazir1@localhost/fastapi'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Post(BaseModel):\n    title: str\n    content: str\n    published: bool =True\nwhile True:\n    try:\n        conn = psycopg2.connect(host='localhost',database='fastapi',user='postgres',password='Ali_wazir1',cursor_factory=RealDictCursor)\n        cursor = conn.cursor()\n        print(\"databse connection successfull\")\n        break",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "find_post",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def find_post(id:int):\n    for p in my_posts:\n        if p['id'] == id:\n            return p\ndef find_index(id):\n    for index,post in enumerate(my_posts):\n        if post['id'] == id:\n            return index\n@app.get(\"/\")\nasync def root():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "find_index",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def find_index(id):\n    for index,post in enumerate(my_posts):\n        if post['id'] == id:\n            return index\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n@app.get(\"/sqlalchemy\")\ndef test_posts(db:Session = Depends(get_db)):\n    return {\"status\":\"success\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "test_posts",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def test_posts(db:Session = Depends(get_db)):\n    return {\"status\":\"success\"}\n# getting all data from database\n@app.get(\"/posts\")\nasync def get_posts():\n    cursor.execute(\"\"\"select * FROM posts\"\"\")\n    posts = cursor.fetchall()\n    print(posts)\n    return {\"data\": posts}\n# creating post",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_post(id: int): \n    cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\",(str(id),)) \n    post = cursor.fetchone()\n    print(post)\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail = f\"post with {id} was not found\")\n    return {\"data\": post}\n# Delete a post\n@app.delete(\"/posts/{id}\")\nasync def update_post(id: int): ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\nclass Post(BaseModel):\n    title: str\n    content: str\n    published: bool =True\nwhile True:\n    try:\n        conn = psycopg2.connect(host='localhost',database='fastapi',user='postgres',password='Ali_wazir1',cursor_factory=RealDictCursor)\n        cursor = conn.cursor()\n        print(\"databse connection successfull\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "my_posts",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "my_posts = [{\"title\":\"Southern\",\"content\":\"UETM students\",\"id\": 1},\n            {\"title\":\"swatian\",\"content\":\"UETM students\",\"id\": 2},\n            {\"title\":\"swatian\",\"content\":\"UETM students\",\"id\": 3}\n           ]\ndef find_post(id:int):\n    for p in my_posts:\n        if p['id'] == id:\n            return p\ndef find_index(id):\n    for index,post in enumerate(my_posts):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Post(Base):\n    __tablename__=\"posts\"\n    id = Column(Integer,primary_key=True,nullable=False)\n    title = Column(String,nullable=False)\n    content = Column(String,nullable=False)\n    published = Column(Boolean,default=True)",
        "detail": "models",
        "documentation": {}
    }
]