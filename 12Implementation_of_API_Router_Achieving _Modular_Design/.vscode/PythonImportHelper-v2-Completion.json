[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "schemas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schemas",
        "description": "schemas",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi.params",
        "description": "fastapi.params",
        "isExtraImport": true,
        "detail": "fastapi.params",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "routers.post",
        "description": "routers.post",
        "peekOfCode": "def get_post(id: int,db:Session = Depends(get_db)): \n    post = db.query(models.Post).filter(models.Post.id == id).first() # ==>corresponding sql querry but when first( is not written) ==>SELECT posts.id AS posts_id, posts.title AS posts_title, posts.content AS posts_content, posts.published AS posts_published, posts.created_at AS posts_created_at FROM posts WHERE posts.id = %(id_1)s\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail = f\"post with {id} was not found\")\n    return post\n# Delete a post\n@router.delete(\"/{id}\")\nasync def delete_post(id: int, db:Session = Depends(get_db)): \n    post = db.query(models.Post).filter(models.Post.id == id).first()\n    if post == None:",
        "detail": "routers.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.post",
        "description": "routers.post",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/posts\",\n    tags=['Posts']\n)\n# getting all data from database\n@router.get(\"/\",response_model=List[schemas.PostResponse])        #List[schemas.PostResponse] here i use the list function because the post repisne is for ine post and we are reicevng multiple post usually o  should make the reposne alos of list so that multiple repsonses models for reponses \nasync def get_posts(db:Session = Depends(get_db)):\n    posts = db.query(models.Post).all()\n    return posts\n# creating post",
        "detail": "routers.post",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "def create_user(user: schemas.CreateUser, db:Session = Depends(get_db)): \n    # hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\n# get user by id",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "def create_user(id: int, db:Session = Depends(get_db)):\n    user = db.query(models.User).filter(models.User.id == id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail = f\"user with id {id} was not found\")\n    return user",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/users\",\n    tags=['Users']\n)\n# Creating user\n@router.post(\"/\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserResponse)\ndef create_user(user: schemas.CreateUser, db:Session = Depends(get_db)): \n    # hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = 'postgresql://postgres:Ali_wazir1@localhost/fastapi'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\nwhile True:\n    try:\n        conn = psycopg2.connect(host='localhost',database='fastapi',user='postgres',password='Ali_wazir1',cursor_factory=RealDictCursor)\n        cursor = conn.cursor()\n        print(\"databse connection successfull\")\n        break\n    except Exception as error:\n        print(\"databse connection fail\")\n        print(\"Error:\",error)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Post(Base):\n    __tablename__=\"posts\"\n    id = Column(Integer,primary_key=True,nullable=False)\n    title = Column(String,nullable=False)\n    content = Column(String,nullable=False)\n    published = Column(Boolean,server_default = 'True',nullable=False)\n    created_at = Column(TIMESTAMP(timezone =True),nullable=False, server_default=text('now()'))\nclass User(Base):\n    __tablename__=\"users\"\n    id = Column(Integer,primary_key=True,nullable=False)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class User(Base):\n    __tablename__=\"users\"\n    id = Column(Integer,primary_key=True,nullable=False)\n    email = Column(String,nullable=False,unique=True)\n    password = Column(String,nullable=False)\n    created_at = Column(TIMESTAMP(timezone =True),nullable=False, server_default=text('now()'))",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool =True \n# model for creating post how type data it should expct whne creating a post  \nclass CreatePost(PostBase):\n    pass\n# model for updating post how type data it should expct whne updating a post  \nclass UpdatePost(PostBase):\n    pass",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreatePost",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class CreatePost(PostBase):\n    pass\n# model for updating post how type data it should expct whne updating a post  \nclass UpdatePost(PostBase):\n    pass\n# what type of data it will giv ein repsonse\nclass PostResponse(PostBase):\n    id: int \n    created_at: datetime\n    # As sqlachemy return an objects but pydantic can only work with dictionary so the bewlow two line wil make pydantic able to work with objet of orm/sqlalchemy ",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UpdatePost",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UpdatePost(PostBase):\n    pass\n# what type of data it will giv ein repsonse\nclass PostResponse(PostBase):\n    id: int \n    created_at: datetime\n    # As sqlachemy return an objects but pydantic can only work with dictionary so the bewlow two line wil make pydantic able to work with objet of orm/sqlalchemy \n    class config:\n        orm_mode = True\nclass CreateUser(BaseModel):",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PostResponse(PostBase):\n    id: int \n    created_at: datetime\n    # As sqlachemy return an objects but pydantic can only work with dictionary so the bewlow two line wil make pydantic able to work with objet of orm/sqlalchemy \n    class config:\n        orm_mode = True\nclass CreateUser(BaseModel):\n    email: EmailStr\n    password: str\nclass UserResponse(BaseModel):",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateUser",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class CreateUser(BaseModel):\n    email: EmailStr\n    password: str\nclass UserResponse(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class config:\n        orm_mode = True",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class config:\n        orm_mode = True",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"],deprecated = \"auto\")\ndef hash(password: str):\n    return pwd_context.hash(password)",
        "detail": "utils",
        "documentation": {}
    }
]