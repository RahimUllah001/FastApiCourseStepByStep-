[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database",
        "description": "database",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "schemas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schemas",
        "description": "schemas",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "oauth2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "oauth2",
        "description": "oauth2",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "models,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models.",
        "description": "models.",
        "detail": "models.",
        "documentation": {}
    },
    {
        "label": "routers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "routers",
        "description": "routers",
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "like",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.ext.declarative",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "conint",
        "importPath": "pydantic.types",
        "description": "pydantic.types",
        "isExtraImport": true,
        "detail": "pydantic.types",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "def login(user_credentials : OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(models.User.email == user_credentials.username).first()     #in request form there 1sr attribute is username which may be suername or email\n    if not user:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail = f\"Invalid Credentials\")\n    #here the 1st password is from requestside and the 2nd is form db which was stored in hashed formate\n    if not utils.verify(user_credentials.password, user.password):  \n                    raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail = f\"Invalid Credentials\")\n    # crate a token\n    # return a JWt token\n    access_token = oauth2.create_access_token(data = {\"user_id\":user.id})",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.auth",
        "description": "routers.auth",
        "peekOfCode": "router = APIRouter(tags=['authentication'])\n# def login(user_credentials : schemas.UserLogin, db: Session = Depends(database.get_db)):   #i will use if inot use authentication request form\n#     user = db.query(models.User).filter(models.User.email == user_credentials.email).first()\n@router.post(\"/login\", response_model=schemas.Token)\ndef login(user_credentials : OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(models.User.email == user_credentials.username).first()     #in request form there 1sr attribute is username which may be suername or email\n    if not user:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail = f\"Invalid Credentials\")\n    #here the 1st password is from requestside and the 2nd is form db which was stored in hashed formate\n    if not utils.verify(user_credentials.password, user.password):  ",
        "detail": "routers.auth",
        "documentation": {}
    },
    {
        "label": "like",
        "kind": 2,
        "importPath": "routers.like",
        "description": "routers.like",
        "peekOfCode": "def like(like: schemas.CreateLike, db: Session = Depends(database.get_db), current_user: int = Depends(oauth2.get_current_user)):\n    like_query = db.query(models.Like).filter(models.Like.post_id == like.post_id, models.Like.user_id == current_user.id)      #as in our schema we ar enot prviding user_id but we are going to take the user id form toke so why we using here current_user alot\n    found_like = like_query.first()\n    if(like.dir == 1):\n        if found_like:\n            raise HTTPException(status_code=status.HTTP_409_CONFLICT,detail=f\"user{current_user.id} has already liked the post {like.post_id} before this \")\n        new_like = models.Like(post_id = like.post_id,user_id = current_user.id)\n        db.add(new_like)\n        db.commit()\n        return {\"message\": \"successfully like dthe post\"}",
        "detail": "routers.like",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.like",
        "description": "routers.like",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/like\",\n    tags=['Like']\n)\n@router.post(\"/\",status_code=status.HTTP_201_CREATED)       #as here is only / but it is actuall /like because like is prefix here \ndef like(like: schemas.CreateLike, db: Session = Depends(database.get_db), current_user: int = Depends(oauth2.get_current_user)):\n    like_query = db.query(models.Like).filter(models.Like.post_id == like.post_id, models.Like.user_id == current_user.id)      #as in our schema we ar enot prviding user_id but we are going to take the user id form toke so why we using here current_user alot\n    found_like = like_query.first()\n    if(like.dir == 1):\n        if found_like:",
        "detail": "routers.like",
        "documentation": {}
    },
    {
        "label": "create_posts",
        "kind": 2,
        "importPath": "routers.post",
        "description": "routers.post",
        "peekOfCode": "def create_posts(post: schemas.CreatePost, db:Session = Depends(get_db), current_user: models.User = Depends(oauth2.get_current_user)):  \n    print(current_user.email)\n    print(current_user.id)\n    # sql alchemy orm\n    new_post = models.Post(owner_id=current_user.id,**post.dict())       #here i am sending owner_id to the db as owner_id is nullable - flase which is actually here the current user \n    db.add(new_post)\n    db.commit()\n    db.refresh(new_post)        #this line is for retirving out new post as we use returning keyword in sql alchemy\n    return new_post\n# getting post of speciffic id",
        "detail": "routers.post",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "routers.post",
        "description": "routers.post",
        "peekOfCode": "def get_post(id: int,db:Session = Depends(get_db)): \n    post = db.query(models.Post).filter(models.Post.id == id).first() # ==>corresponding sql querry but when first( is not written) ==>SELECT posts.id AS posts_id, posts.title AS posts_title, posts.content AS posts_content, posts.published AS posts_published, posts.created_at AS posts_created_at FROM posts WHERE posts.id = %(id_1)s\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail = f\"post with {id} was not found\")\n    return post\n# Delete a post\n@router.delete(\"/{id}\")\nasync def delete_post(id: int, db:Session = Depends(get_db), current_user: models.User = Depends(oauth2.get_current_user)): \n    post = db.query(models.Post).filter(models.Post.id == id).first()\n    if post == None:",
        "detail": "routers.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.post",
        "description": "routers.post",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/posts\",\n    tags=['Posts']\n)\n# getting all data from database\n@router.get(\"/\",response_model=List[schemas.PostResponse])        #List[schemas.PostResponse] here i use the list function because the post repisne is for ine post and we are reicevng multiple post usually o  should make the reposne alos of list so that multiple repsonses models for reponses \nasync def get_posts(db:Session = Depends(get_db), limit: int = 10, skip: int = 0, search : Optional[str] = \"\"):\n    print(limit)\n    print(skip)\n    print(search)",
        "detail": "routers.post",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "def create_user(user: schemas.CreateUser, db:Session = Depends(get_db)): \n    # hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\n# get user by id",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "def create_user(id: int, db:Session = Depends(get_db)):\n    user = db.query(models.User).filter(models.User.id == id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail = f\"user with id {id} was not found\")\n    return user",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.user",
        "description": "routers.user",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/users\",\n    tags=['Users']\n)\n# Creating user\n@router.post(\"/\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserResponse)\ndef create_user(user: schemas.CreateUser, db:Session = Depends(get_db)): \n    # hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password",
        "detail": "routers.user",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_hostname: str\n    database_port: str\n    database_password: str\n    database_name: str\n    database_username: str\n    secret_key: str\n    algorithm: str\n    access_token_expire_minutes: int\n    class Config:",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "settings = Settings()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# uncomment this when u want to per raw sql operation for using orm the above is right e sqlalchemy\n'''\nwhile True:\n    try:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False,autoflush=False,bind=engine)\nBase = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# uncomment this when u want to per raw sql operation for using orm the above is right e sqlalchemy",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()\n# getting session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# uncomment this when u want to per raw sql operation for using orm the above is right e sqlalchemy\n'''",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# this three lines show the path appication ==>  Api Router\napp.include_router(post.router)\napp.include_router(user.router)\napp.include_router(auth.router)\napp.include_router(like.router)\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Post(Base):\n    __tablename__=\"posts\"\n    id = Column(Integer,primary_key=True,nullable=False)\n    title = Column(String,nullable=False)\n    content = Column(String,nullable=False)\n    published = Column(Boolean,server_default = 'True',nullable=False)\n    created_at = Column(TIMESTAMP(timezone =True),nullable=False, server_default=text('now()'))\n    owner_id = Column(Integer,ForeignKey(\"users.id\",ondelete=\"CASCADE\"),nullable=False)     #inside foreign key the first arg is name of table to which we borrow the id andd second is the action what should be done on delete.\n    owner = relationship(\"User\")        #this relationship in sqlalchemy property which save all the iformation to the variable which are inside  given class as here a var is owner and class is User\nclass User(Base):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class User(Base):\n    __tablename__=\"users\"\n    id = Column(Integer,primary_key=True,nullable=False)\n    email = Column(String,nullable=False,unique=True)\n    password = Column(String,nullable=False)\n    created_at = Column(TIMESTAMP(timezone =True),nullable=False, server_default=text('now()'))\nclass Like(Base):       #like = vote\n    __tablename__ = \"likes\"\n    user_id = Column(Integer,ForeignKey(\"users.id\",ondelete=\"CASCADE\"),primary_key=True)\n    post_id = Column(Integer,ForeignKey(\"posts.id\",ondelete=\"CASCADE\"),primary_key=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Like",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Like(Base):       #like = vote\n    __tablename__ = \"likes\"\n    user_id = Column(Integer,ForeignKey(\"users.id\",ondelete=\"CASCADE\"),primary_key=True)\n    post_id = Column(Integer,ForeignKey(\"posts.id\",ondelete=\"CASCADE\"),primary_key=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "def create_access_token(data:dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt = jwt.encode(to_encode,SECRET_KEY,ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token:str,credentials_exception):\n    try:\n        payload = jwt.decode(token,SECRET_KEY,algorithms=[ALGORITHM])\n        id: str = payload.get(\"user_id\")",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "def verify_access_token(token:str,credentials_exception):\n    try:\n        payload = jwt.decode(token,SECRET_KEY,algorithms=[ALGORITHM])\n        id: str = payload.get(\"user_id\")\n        if id is None:\n            raise credentials_exception\n        token_data = schemas.TokenData(id=str(id))\n    except JWTError:\n        raise credentials_exception\n    return token_data ",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(database.get_db)):\n    credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                          detail = f\"could not validate credentials\", \n                                          headers={\"WWW-Authenticate\":\"Bearer\"})\n    token = verify_access_token(token, credentials_exception)\n    user = db.query(models.User).filter(models.User.id == token.id).first()\n    return user",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl='login')      #oauth2_scheme is an instance of the class OAuth2PasswordBearer which is used to extract token \n#SECRET_KEY\n#Algorithm\n#Expiration\nSECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data:dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "SECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data:dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt = jwt.encode(to_encode,SECRET_KEY,ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token:str,credentials_exception):",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "ALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data:dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt = jwt.encode(to_encode,SECRET_KEY,ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token:str,credentials_exception):\n    try:",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "oauth2",
        "description": "oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data:dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt = jwt.encode(to_encode,SECRET_KEY,ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token:str,credentials_exception):\n    try:\n        payload = jwt.decode(token,SECRET_KEY,algorithms=[ALGORITHM])",
        "detail": "oauth2",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool =True \n# request type for user creation\nclass CreateUser(BaseModel):\n    email: EmailStr\n    password: str\n# Response on user creation \nclass UserResponse(BaseModel):",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateUser",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class CreateUser(BaseModel):\n    email: EmailStr\n    password: str\n# Response on user creation \nclass UserResponse(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class config:\n        orm_mode = True",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class config:\n        orm_mode = True\n# model for creating post how type data it should expct whne creating a post  \nclass CreatePost(PostBase):\n    pass\n# model for updating post how type data it should expct whne updating a post  ",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreatePost",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class CreatePost(PostBase):\n    pass\n# model for updating post how type data it should expct whne updating a post  \nclass UpdatePost(PostBase):\n    pass\n# what type of data it will giv ein repsonse\nclass PostResponse(PostBase):\n    id: int \n    created_at: datetime\n    owner_id: int       #this will show whime created the post",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UpdatePost",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UpdatePost(PostBase):\n    pass\n# what type of data it will giv ein repsonse\nclass PostResponse(PostBase):\n    id: int \n    created_at: datetime\n    owner_id: int       #this will show whime created the post\n    owner : UserResponse                                        #this line means that owner attribute is eaual to usreresponse which is actually reponse on user creation it will reutrn id,email and cratedat time\n    # As sqlachemy return an objects but pydantic can only work with dictionary so the bewlow two line wil make pydantic able to work with objet of orm/sqlalchemy \n    class Config:",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PostResponse(PostBase):\n    id: int \n    created_at: datetime\n    owner_id: int       #this will show whime created the post\n    owner : UserResponse                                        #this line means that owner attribute is eaual to usreresponse which is actually reponse on user creation it will reutrn id,email and cratedat time\n    # As sqlachemy return an objects but pydantic can only work with dictionary so the bewlow two line wil make pydantic able to work with objet of orm/sqlalchemy \n    class Config:\n        orm_mode = True\n            #model_config = ConfigDict(from_attributes=True)        #in pydantic version we have to write this intead of writng the above two lines\n# request type for login",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: EmailStr\n    password: str \n# Response to login as it give a token in return Token in response\nclass Token(BaseModel):\n    access_token: str \n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\n    # create_at: datetime",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str \n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\n    # create_at: datetime\n#when we are going to make like what  type of data the like function should expect or what data we should send\nclass CreateLike(BaseModel):\n    post_id: int\n    dir: int = Field(..., ge=0, le=1)    #dir mean direcion as we can like or want to remove our like form post  so we will use dir= 1 for likeness and dir=0 for removing our like",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    id: Optional[str] = None\n    # create_at: datetime\n#when we are going to make like what  type of data the like function should expect or what data we should send\nclass CreateLike(BaseModel):\n    post_id: int\n    dir: int = Field(..., ge=0, le=1)    #dir mean direcion as we can like or want to remove our like form post  so we will use dir= 1 for likeness and dir=0 for removing our like",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CreateLike",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class CreateLike(BaseModel):\n    post_id: int\n    dir: int = Field(..., ge=0, le=1)    #dir mean direcion as we can like or want to remove our like form post  so we will use dir= 1 for likeness and dir=0 for removing our like",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"],deprecated = \"auto\")\ndef hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "utils",
        "documentation": {}
    }
]